#!/usr/bin/python3
# https://codility.com/media/train/2-CountingElements.pdf
from typing import List


# Time O(n^2), n is the length of A
# Space O(1)
def isSwapRequired(A: List[int], B: List[int], m) -> bool:
    n = len(A)
    sum_a = sum(A)
    sum_b = sum(B)
    for i in range(n):
        for j in range(n):
            change = B[j] - A[i]
            sum_a += change
            sum_b -= change
            if sum_a == sum_b:
                return True
            sum_a -= change
            sum_b += change

    return False


def counting(A: List[int], m) -> List[int]:
    count = [0] * (m + 1)
    for value in A:
        count[value] += 1
    return count


# Time O(n+m), n is the length of A
# Space O(1)
def isSwapRequired2(A: List[int], B: List[int], m) -> bool:
    n = len(A)
    sum_a = sum(A)
    sum_b = sum(B)
    d = sum_b - sum_a
    if d % 2 == 1:
        return False

    d //= 2
    count = counting(A, m)
    for b in B:
        if 0 <= b - d <= m and count[b - d] > 0:
            return True
    return False


if __name__ == '__main__':
    inputs = (
        {
            "A": [284336, 379203, 505996, 280086, 505913, 549851, 398160, 584820, 405087, 821010, 165802, 595335,
                  529352, 370450, 516878, 128064, 510510, 193094, 900684, 335906, 960243, 871548, 474399, 429942,
                  778080, 45759, 329949, 231089, 836200, 934556, 418802, 761659, 213517, 485054, 269300, 632810, 775825,
                  980042, 280874, 942926, 312680, 817310, 307484, 459051, 846865, 507895, 593825, 352554, 386782,
                  529229, 550898, 784278, 617030, 72088, 54000, 623285, 371642, 14405, 129898, 951840, 183083, 338670,
                  642237, 821010, 903533, 813859, 188081, 692463, 286103, 815837, 371, 535919, 351774, 621622, 660529,
                  186312, 466668, 668929, 431635, 139529, 315675, 981943, 653362, 627001, 861991, 221293, 753151,
                  978012, 341644, 177253, 157103, 889573, 434590, 649486, 707610, 185039, 107690, 651175, 291928,
                  515105],
            "B": [529352, 836200, 291928, 418802, 817310, 529229, 185039, 951840, 128064, 623285, 660529, 934556,
                  960243, 535919, 54000, 617030, 129898, 351774, 621622, 668929, 980042, 72088, 107690, 505996, 213517,
                  861991, 312680, 889573, 466668, 593825, 329949, 459051, 177253, 668968, 510510, 284336, 942926,
                  485054, 632810, 165802, 183083, 505913, 978012, 584820, 474399, 371642, 846865, 813859, 186312,
                  815837, 335906, 775825, 286103, 221293, 398160, 338670, 761659, 280874, 193094, 653362, 595335,
                  431635, 371, 778080, 627001, 784278, 45759, 405087, 507895, 315675, 515105, 871548, 981943, 434590,
                  516878, 900684, 231089, 269300, 707610, 642237, 352554, 157103, 379203, 307484, 139529, 429942,
                  188081, 903533, 280086, 651175, 649486, 386782, 753151, 370450, 549851, 341644, 14405, 550898, 692463,
                  668968],
            "m": 1000000,
            "expected": True
        },
        {
            "A": [545697, 829663, 355396, 332786, 250678, 51714, 429753, 698474, 901295, 56623, 153060, 964875, 853950, 264246, 501348, 698722, 601701, 904253, 771810, 239790, 652520, 118478, 737421, 777946, 766829, 145878, 610964, 618244, 11260, 399306, 366638, 723584, 421509, 198879, 196358, 42279, 806991, 25153, 337575, 289554, 992079, 66085, 513646, 897745, 797721, 320430, 611130, 839183, 482484, 351563, 251478, 945467, 890135, 974824, 290869, 538362, 208635, 116509, 421291, 48717, 994888, 832931, 28510, 150290, 976985, 189553, 741320, 857168, 213615, 880703, 857928, 906334, 321674, 936323, 898916, 186056, 152060, 347159, 514353, 505957, 812779, 983269, 751786, 384414, 682714, 83704, 211285, 616833, 355395, 90161, 287098, 710968, 249564, 543839, 848585, 406447, 223812, 71409, 414620, 808623],
            "B": [181234, 551850, 328754, 149657, 401023, 146727, 263670, 482337, 696304, 261871, 221476, 873607, 835540, 105558, 7427, 584714, 381877, 67328, 149958, 444156, 59968, 966683, 947871, 97375, 201800, 66306, 646735, 934662, 107341, 722505, 492861, 803973, 242831, 655553, 802051, 292366, 684262, 751377, 668370, 121645, 833357, 703225, 171054, 357222, 174740, 118965, 540908, 883933, 891110, 51015, 219888, 469762, 820983, 155097, 188747, 668776, 299091, 861207, 950566, 757939, 771346, 233933, 566123, 393161, 488682, 384477, 262234, 300926, 391923, 105210, 953881, 190380, 193244, 344690, 615725, 402, 39170, 595122, 462068, 218296, 747056, 376436, 155254, 16794, 150966, 602274, 849175, 968143, 448270, 814641, 631647, 193798, 258178, 51680, 330380, 325097, 314887, 150144, 202557, 77486],
            "m": 1000000,
            "expected": False  # Two different set
        },
    )

    test_passed = 0
    for idx, val in enumerate(inputs):
        output = isSwapRequired2(val["A"], val["B"], val["m"])
        if output == val['expected']:
            print(f"{idx}. CORRECT Answer\nOutput:   {output}\nExpected: {val['expected']}\n")
            test_passed += 1
        else:
            print(f"{idx}. WRONG Answer\nOutput:{output}\nExpected:{val['expected']}\n")

    print(f"Passed: {test_passed:3}/{idx + 1}\n")
